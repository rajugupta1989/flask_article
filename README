# Flask RESTful API for Articles and Comments

## Overview

This project is a Flask-based RESTful API designed to manage a system of articles and comments. It provides endpoints for creating, retrieving, updating, and deleting articles, as well as adding comments to articles. The API supports pagination, sorting, and filtering by author or keyword.

## Features

- **GET /api/articles**: Retrieve a paginated list of articles.
- **POST /api/articles**: Create a new article.
- **GET /api/articles/{article_id}**: Retrieve detailed information about a specific article, including its comments.
- **POST /api/articles/{article_id}/comments**: Add a comment to a specific article.
- **PUT /api/articles/{article_id}**: Update an existing article.
- **DELETE /api/articles/{article_id}**: Delete an article.

## Installation

### Prerequisites

- Python 3.8+
- Sqlite
- pip (Python package installer)

### Setup

1. Clone the repository:

    ```sh
    git clone https://github.com/xxxx-xxx-xxx/flask-articles.git
    cd flask-articles
    ```

2. Create and activate a virtual environment:

    ```
    python -m venv venv
    source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
    ```

3. Install the required packages:

    ```
    pip install -r requirements.txt
    ```

4. Configure your environment variables. Create a `.env` file in the root directory and add the following:

    ```
    FLASK_APP=run.py
    FLASK_ENV=development
    SECRET_KEY="dwednewdfwefjwnfkwf24242"

    # SQLite database configuration
    SQLALCHEMY_DATABASE_URI=sqlite:///db.sqlite
    SQLALCHEMY_TRACK_MODIFICATIONS=False
    ```

5. Run the application:

    ```
    flask run
    ```

## Usage

### Endpoints

1. **GET /api/articles**
   - Returns a paginated list of articles.
   - Supports query parameters for pagination (`page` and `per_page`), sorting (`sort_by`), and filtering (`author` and `keyword`).
   

    ```
    curl -X GET "http://localhost:5000/api/articles?page=1&per_page=10&sort_by=title&sort_order=desc&author=string&keyword=string"
    ```

2. **POST /api/articles**
   - Creates a new article.
   - Requires `title` and `content` in the request body.

    ```
    curl -X POST -H "Content-Type: application/json" -d '{"title": "New Article", "content": "This is a new article", "author": "JohnDoe"}' http://localhost:5000/api/articles
    ```

3. **GET /api/articles/{article_id}**
   - Retrieves detailed information about a specific article, including its comments.

    ```
    curl -X GET http://localhost:5000/api/articles/1
    ```

4. **POST /api/articles/{article_id}/comments**
   - Adds a comment to a specific article.
   - Requires `author` and `content` in the request body.

    ```
    curl -X POST -H "Content-Type: application/json" -d '{"author": "JaneDoe", "content": "Great article!"}' http://localhost:5000/api/articles/1/comments
    ```

5. **PUT /api/articles/{article_id}**
   - Updates an existing article.
   - Requires `title` and/or `content` in the request body.

    ```
    curl -X PUT -H "Content-Type: application/json" -d '{"title": "Updated Title", "content": "Updated content"}' http://localhost:5000/api/articles/1
    ```

6. **DELETE /api/articles/{article_id}**
   - Deletes an article.

    ```
    curl -X DELETE http://localhost:5000/api/articles/1
    ```

## Running Tests

To run the tests, use the following command:

```
pytest
